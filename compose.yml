services:
  postgres:
    image: postgres:15-alpine
    container_name: user_api_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-userdb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secretpassword}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./init-roles.sql:/docker-entrypoint-initdb.d/00-roles.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgrest:
    image: postgrest/postgrest:v11.2.0
    container_name: user_api_postgrest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secretpassword}@postgres:5432/${POSTGRES_DB:-userdb}
      PGRST_DB_SCHEMAS: api
      PGRST_DB_ANON_ROLE: web_anon
      PGRST_OPENAPI_SERVER_PROXY_URI: ${API_URL:-http://localhost:3000}
      PGRST_SERVER_CORS_ALLOWED_ORIGINS: "*"
    ports:
      - "${API_PORT:-3000}:3000"
    restart: unless-stopped

  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: user_api_swagger
    depends_on:
      - postgrest
    environment:
      SWAGGER_JSON_URL: http://localhost:3000/
    ports:
      - "${SWAGGER_PORT:-8080}:8080"
    restart: unless-stopped

volumes:
  postgres_data: